import telebot
from telebot import types
from config import BOT_TOKEN
from tpu_model import DialogAssistant
from tpu_find_topic import TopicAssistant
from tpu_parser import LinkParser
from tpu_info_base import TextSearchEngine
import logging
import random
from datetime import datetime, timedelta


import difflib

def parse_teachers(file_path):
    teachers = {}
    with open(file_path, 'r', encoding='utf-8') as file:
        for line in file:
            data = line.strip().split('\t')
            
            if data[0] != "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏":
                full_name = data[0]
                last_name = data[0].split(' ')[0]
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–æ–≤–∞—Ä—å
                teachers[full_name] = {'full_name': full_name,'name': last_name, 'info': line.replace('\t', '\n')}
            
    return teachers

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö
teachers = parse_teachers("./data/staff.txt")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫
def find_teacher(input_name):
    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    input_name_lower = input_name.lower()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    possible_matches = difflib.get_close_matches(input_name_lower, teachers.keys(), n=1, cutoff=0.6)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    if possible_matches:
        best_match_name = possible_matches[0]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
        return teachers[best_match_name]
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–µ –∏–º—è –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        name_parts = input_name.split()
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å (—Ñ–∞–º–∏–ª–∏—é)
        last_name = name_parts[-1].lower()
        # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ–∞–º–∏–ª–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        possible_last_names = difflib.get_close_matches(last_name, [name.split()[1].lower() for name in teachers.keys()], n=1, cutoff=0.4)
        if possible_last_names:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ–∞–º–∏–ª–∏—é, –∏—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –Ω–µ–π
            best_match_name = possible_last_names[0]
            return teachers[best_match_name]
        else:
            # –ï—Å–ª–∏ –∏ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def current_time():
    return datetime.now().strftime("%H:%M:%S")

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
parser = LinkParser('links.txt','./data')
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
print("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞")
topic_list, parsed_data = parser.parse_all_pages()
print("–ü–∞—Ä—Å–µ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª, —Ç–µ–º–∞—Ç–∏–∫–∏")
print(topic_list)
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
llm_model = DialogAssistant()
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏")
topic_bot = TopicAssistant(topic_list)
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
teacher_by_fio_flag =  0

pattern_sentences = [
    "–î–∞–π—Ç–µ –º–Ω–µ –º–∏–Ω—É—Ç–∫—É –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ!",
    "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –º–∏–Ω—É—Ç–∫—É –ø–æ–¥—É–º–∞—Ç—å!",
    "–î–∞–º —Å–µ–±–µ –º–∏–Ω—É—Ç–∫—É, —á—Ç–æ–±—ã –≤—Å–µ –æ–±–¥—É–º–∞—Ç—å!",
    "–Ø –≤–æ–∑—å–º—É –º–∏–Ω—É—Ç–∫—É, —á—Ç–æ–±—ã –æ–±–¥—É–º–∞—Ç—å —ç—Ç–æ!",
    "–Ø —Å–¥–µ–ª–∞—é –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –º–∏–Ω—É—Ç–∫—É, —á—Ç–æ–±—ã –æ–±–¥—É–º–∞—Ç—å!",
    "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—É–º–∞—Ç—å!",
    "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç–∫—É, —è –≤—Å–µ –æ–±–¥—É–º–∞—é!",
    "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø–∞—Ä–∞ –º–∏–Ω—É—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ!",
    "–î–∞–π—Ç–µ –º–Ω–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É, —á—Ç–æ–±—ã –≤—Å–µ –≤–∑–≤–µ—Å–∏—Ç—å!",
    "–Ø –∑–∞–¥—É–º–∞—é—Å—å –Ω–∞–¥ —ç—Ç–∏–º –Ω–∞ –º–∏–Ω—É—Ç–∫—É!"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ù–∞—á–∞—Ç—å")
    btn2 = types.KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û")
    # btn3 = types.KeyboardButton("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û")
    markup.add(btn1)
    markup.add(btn2)
    # markup.add(btn3)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø - –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏–∫! –Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã 0–í02 –¢–æ–º—Å–∫–æ–≥–æ –ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –≤ —Ä–µ—à–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º. –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ–±—É—á–µ–Ω–∏—è, —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –æ –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏ –≤ –¢–ü–£.", reply_markup=markup)

def echo_all_about_user(message):
    user_info = "Unknown user\n"
    try:
        user = message.from_user
        user_info = f"ID: {user.id} "
        user_info += f"–ò–º—è: {user.first_name} "
        user_info += f"–§–∞–º–∏–ª–∏—è: {user.last_name} "
        user_info += f"–õ–æ–≥–∏–Ω: @{user.username} " if user.username else "–õ–æ–≥–∏–Ω: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω "
        user_info += f"–Ø–∑—ã–∫: {user.language_code}\n"
    except:
        pass
    return user_info

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global teacher_by_fio_flag
    if message.text == 'üëã –ù–∞—á–∞—Ç—å':
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', parse_mode='Markdown')
        teacher_by_fio_flag = 0
    elif message.text == 'üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û':
        bot.send_message(message.from_user.id, '‚ùì –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', parse_mode='Markdown')
        teacher_by_fio_flag = 1
    # elif message.text == 'üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –§–ò–û':
    #     bot.send_message(message.from_user.id, '‚ùì –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è', parse_mode='Markdown')
    #     teacher_by_fio_flag = 2
    elif teacher_by_fio_flag == 1:
        first_time = current_time()
        request_time = datetime.now()
        formatted_request_time = request_time.strftime("%Y-%m-%d %H:%M:%S")
        logging.info("\n=============================================================================\n" + formatted_request_time + "\n" + echo_all_about_user(message) +"–í–û–ü–†–û–°:\t" + message.text)
        bot.send_message(message.from_user.id, 'üîç –£–∂–µ –∏—â—É!', parse_mode='Markdown')
        try:
            teacher_info = find_teacher(message.text)
        except:
            teacher_info = None
            
        if teacher_info:
            logging.info("*******************************************\n –ë–ê–ó–ê –∑–Ω–∞–Ω–∏–π\t")
            logging.info(teacher_info['info'])
            logging.info("*******************************************")
            response = llm_model.get_answer(message.text,teacher_info['info'])
        else:
            response ="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –§–ò–û –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
        second_time = current_time()
        first_time_obj = datetime.strptime(first_time, "%H:%M:%S").time()
        second_time_obj = datetime.strptime(second_time, "%H:%M:%S").time()
        time_difference = timedelta(hours=second_time_obj.hour - first_time_obj.hour,
                                    minutes=second_time_obj.minute - first_time_obj.minute,
                                    seconds=second_time_obj.second - first_time_obj.second)
        formatted_time_difference = datetime(1, 1, 1) + time_difference
        
        bot.send_message(message.from_user.id, response, parse_mode='Markdown')
        
        
        logging.info(second_time + "\t–û–¢–í–ï–¢\t" + response + "\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:\t" + formatted_time_difference.strftime("%H:%M:%S") + "\n=============================================================================\n")
        teacher_by_fio_flag = 0
    # elif teacher_by_fio_flag == 2:
    #     first_time = current_time()
    #     request_time = datetime.now()
    #     formatted_request_time = request_time.strftime("%Y-%m-%d %H:%M:%S")
    #     logging.info("\n=============================================================================\n" + formatted_request_time + "\n" + echo_all_about_user(message) +"–í–û–ü–†–û–°:\t" + message.text)
    #     bot.send_message(message.from_user.id, 'üîç –£–∂–µ –∏—â—É!', parse_mode='Markdown')
    #     try:
    #         teacher_info = find_teacher(message.text)
    #     except:
    #         teacher_info = None
            
    #     if teacher_info:
    #         bot.send_message(message.from_user.id, teacher_info['info'], parse_mode='Markdown')
    #     else:
    #         bot.send_message(message.from_user.id,  "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É –≤ –§–ò–û –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.", parse_mode='Markdown')
    #     second_time = current_time()
    #     first_time_obj = datetime.strptime(first_time, "%H:%M:%S").time()
    #     second_time_obj = datetime.strptime(second_time, "%H:%M:%S").time()
    #     time_difference = timedelta(hours=second_time_obj.hour - first_time_obj.hour,
    #                                 minutes=second_time_obj.minute - first_time_obj.minute,
    #                                 seconds=second_time_obj.second - first_time_obj.second)
    #     formatted_time_difference = datetime(1, 1, 1) + time_difference
    #     logging.info(second_time + "\t–û–¢–í–ï–¢\t" + str(teacher_info) + "\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:\t" + formatted_time_difference.strftime("%H:%M:%S") + "\n=============================================================================\n")
    #     teacher_by_fio_flag = 0
    elif len(message.text) > 0:
        teacher_by_fio_flag = 0
        bot.send_message(message.from_user.id, random.choice(pattern_sentences), parse_mode='Markdown')
        try:
            first_time = current_time()
            request_time = datetime.now()
            formatted_request_time = request_time.strftime("%Y-%m-%d %H:%M:%S")
            logging.info("\n=============================================================================\n" + formatted_request_time + "\n" + echo_all_about_user(message) +"–í–û–ü–†–û–°:\t" + message.text)
            topic = topic_bot.get_topic(message.text).strip().replace("'", '').replace('–û—Ç–≤–µ—Ç: ', '').replace('"', '').replace("[",'').replace("]",'').replace("(",'').replace(")",'')
            logging.info("–¢–û–ü–ò–ö:\t" + topic)
            teacher = None
            try:
                if("–§–ò–û:".lower() in topic.lower()):
                    teacher = find_teacher(topic.lower().replace('—Ñ–∏–æ:',''))['info']
                search_engine = TextSearchEngine(parsed_data[topic])
            except:
                search_engine = TextSearchEngine(parsed_data["–î—Ä—É–≥–æ–µ"])
            if(teacher is None):
                closest_matching_text = search_engine.get_closest_matching_text(message.text)
            else:
                closest_matching_text = teacher 
            response = llm_model.get_answer(message.text,str(closest_matching_text))

            logging.info("*******************************************\n –ë–ê–ó–ê –∑–Ω–∞–Ω–∏–π\t")
            if(teacher is None):
                for x in closest_matching_text:
                    logging.info(x)
            else:
                logging.info(closest_matching_text)
            logging.info("*******************************************")
            second_time = current_time()
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime.time
            first_time_obj = datetime.strptime(first_time, "%H:%M:%S").time()
            second_time_obj = datetime.strptime(second_time, "%H:%M:%S").time()

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_difference = timedelta(hours=second_time_obj.hour - first_time_obj.hour,
                                        minutes=second_time_obj.minute - first_time_obj.minute,
                                        seconds=second_time_obj.second - first_time_obj.second)
            
            formatted_time_difference = datetime(1, 1, 1) + time_difference
            
            logging.info(second_time + "\t–û–¢–í–ï–¢\t" + response + "\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:\t" + formatted_time_difference.strftime("%H:%M:%S") + "\n=============================================================================\n")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞: " + str(e))
            response = "–û–π, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞. –Ø –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤—Ç—å —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!"
        bot.send_message(message.from_user.id, response, parse_mode='Markdown')

# –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(none_stop=True, interval=0)

