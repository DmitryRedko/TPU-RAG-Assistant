import telebot
from telebot import types
from config import BOT_TOKEN
from tpu_model import DialogAssistant
from tpu_find_topic import TopicAssistant
from tpu_parser import LinkParser
from tpu_info_base import TextSearchEngine
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
def current_time():
    return datetime.now().strftime("%H:%M:%S")

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
parser = LinkParser('links.txt')
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
print("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞")
topic_list, parsed_data = parser.parse_all_pages()
print("–ü–∞—Ä—Å–µ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª")
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
llm_model = DialogAssistant()
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏")
topic_bot = TopicAssistant(topic_list)
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', parse_mode='Markdown')
    elif len(message.text) > 0:
        bot.send_message(message.from_user.id, "–î–∞–π—Ç–µ –º–Ω–µ –º–∏–Ω—É—Ç—É –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è!", parse_mode='Markdown')
        try:
            first_time = current_time()
            logging.info("\n=============================================================================\n"+ first_time + "\t–í–û–ü–†–û–°:\t" + message.text)
            topic = topic_bot.get_topic(message.text).strip().replace("'", '').replace('–û—Ç–≤–µ—Ç: ', '').replace('"', '').replace("[",'').replace("]",'').replace("(",'').replace(")",'')
            logging.info("–¢–û–ü–ò–ö:\t" + topic)
            try:
                search_engine = TextSearchEngine(parsed_data[topic])
            except:
                search_engine = TextSearchEngine(parsed_data["–î—Ä—É–≥–æ–µ"])

            closest_matching_text = search_engine.get_closest_matching_text(message.text)
            response = llm_model.get_answer(message.text,str(closest_matching_text))
            logging.info("*******************************************\n –ë–ê–ó–ê –∑–Ω–∞–Ω–∏–π\t")
            for x in closest_matching_text:
                logging.info(x)
            logging.info("*******************************************")
            second_time = current_time()
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime.time
            first_time_obj = datetime.strptime(first_time, "%H:%M:%S").time()
            second_time_obj = datetime.strptime(second_time, "%H:%M:%S").time()

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_difference = timedelta(hours=second_time_obj.hour - first_time_obj.hour,
                                        minutes=second_time_obj.minute - first_time_obj.minute,
                                        seconds=second_time_obj.second - first_time_obj.second)
            
            formatted_time_difference = datetime(1, 1, 1) + time_difference
            
            logging.info(second_time + "\t–û–¢–í–ï–¢\t" + response + "\n–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:\t" + formatted_time_difference.strftime("%H:%M:%S") + "\n=============================================================================\n")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞: " + str(e))
            response = "–û–π, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞. –Ø –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤—Ç—å —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!"
        bot.send_message(message.from_user.id, response, parse_mode='Markdown')

# –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(none_stop=True, interval=0)

