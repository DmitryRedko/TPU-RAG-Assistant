# from flask import Flask, request, jsonify, render_template
# from tpu_model import DialogAssistant
# from tpu_find_topic import TopicAssistant
# from tpu_parser import LinkParser
# from tpu_info_base import TextSearchEngine

# app = Flask(__name__)
# print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
# parser = LinkParser('links.txt')
# print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
# print("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞")
# topic_list, parsed_data = parser.parse_all_pages()
# print("–ü–∞—Ä—Å–µ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª")
# print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
# bot = DialogAssistant()
# print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
# print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏")
# topic_bot = TopicAssistant(topic_list)
# print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")

# messages = []

# def process_message(message):
#     topic = topic_bot.get_topic(message).strip().replace("'", '').replace('–û—Ç–≤–µ—Ç: ', '').replace('"', '')
#     print(topic)
#     search_engine = TextSearchEngine(parsed_data[topic])
#     closest_matching_text = search_engine.get_closest_matching_text(message)
#     response = bot.get_answer(message,str(closest_matching_text))
#     print(topic + "\n" + closest_matching_text[0] + "\n" + closest_matching_text[1] + "\n" + closest_matching_text[2])
#     return response
    

# # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# @app.route('/')
# def index():
#     return render_template('index.html', messages=messages)

# # API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# @app.route('/send_message', methods=['POST'])
# def send_message():
#     content = request.json['content']
#     messages.append({'sender': 'User', 'content': content})
#     bot_response = process_message(content)
#     messages.append({'sender': 'Bot', 'content': bot_response})
#     return jsonify({'status': 'ok', 'bot_response': bot_response})

# if __name__ == '__main__':
#     app.run(host='0.0.0.0', port=5025)


# 172.20.113.192


import telebot
from telebot import types
from config import BOT_TOKEN
from tpu_model import DialogAssistant
from tpu_find_topic import TopicAssistant
from tpu_parser import LinkParser
from tpu_info_base import TextSearchEngine

print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
parser = LinkParser('links.txt')
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
print("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞")
topic_list, parsed_data = parser.parse_all_pages()
print("–ü–∞—Ä—Å–µ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª")
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏")
llm_model = DialogAssistant()
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏")
topic_bot = TopicAssistant(topic_list)
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–∏–∫-–º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")


bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start(message):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å', parse_mode='Markdown')
    elif(len(message.text)>0):
        bot.send_message(message.from_user.id, "–î–∞–π—Ç–µ –º–Ω–µ –º–∏–Ω—É—Ç—É –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è!", parse_mode='Markdown')
        try:
            topic = topic_bot.get_topic(message.text).strip().replace("'", '').replace('–û—Ç–≤–µ—Ç: ', '').replace('"', '').replace("[",'').replace("]",'').replace("(",'').replace(")",'')
            print("\n=============================================================================\n–í–û–ü–†–û–°:\t",message.text,"\n")
            print("–¢–û–ü–ò–ö:\t",topic)
            try:
                search_engine = TextSearchEngine(parsed_data[topic])
            except:
                search_engine = TextSearchEngine(parsed_data["–î—Ä—É–≥–æ–µ"])
                
            closest_matching_text = search_engine.get_closest_matching_text(message.text)
            response = llm_model.get_answer(message.text,str(closest_matching_text))
            print("\n*******************************************\n –ë–ê–ó–ê –∑–Ω–∞–Ω–∏–π\t")
            for x in closest_matching_text:
                print(x)
            print("\n*******************************************\n")
                # response = "–£–ø—Å, –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑!"
            print("–û–¢–í–ï–¢\t", response,"\n=============================================================================\n")
        except:
            response = "–û–π, –≤—ã—à–ª–∞ –æ—à–∏–±–∫–∞. –Ø –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤—Ç—å —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞–∫—É—é-–ª–∏–±–æ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!"
        bot.send_message(message.from_user.id, response, parse_mode='Markdown')



bot.polling(none_stop=True, interval=0) 